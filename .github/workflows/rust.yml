# .github/workflows/use-reusable-workflow.yml

name: Use Reusable Rust Build Workflow

on:
  workflow_dispatch:
    inputs:
      toolchain:
        description: 'Rust toolchain version (e.g., stable, nightly)'
        required: true
        type: string
      target:
        description: 'Compilation target (e.g., x86_64-unknown-linux-gnu)'
        required: true
        type: string
      components:
        description: 'Rust components to install (comma-separated, e.g., clippy, rustfmt, llvm-tools)'
        required: false
        type: string
      rustflags:
        description: 'Rust compiler flags (e.g., -C opt-level=3 -C target-cpu=native -C lto)'
        required: false
        type: string


jobs:
  use-reusable-workflow:
    uses: ShazIndia/Actions-Reusable-Workflows/.github/workflows/rust-reusable-workflow.yml@main
    with:
      toolchain: ${{ inputs.toolchain }}
      target: ${{ inputs.target }}
      components: ${{ inputs.components }}


# # .github/workflows/use-reusable-workflow.yml

# name: Use Reusable Rust Build Workflow

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - main

# jobs:
#   use-reusable-workflow:
#     uses: ShazIndia/Actions-Reusable-Workflows/.github/workflows/rust-reusable-workflow.yaml@main
#     with:
#       toolchain: ${{ inputs.toolchain }}
#       target: ${{ inputs.target }}
#       components: ${{ inputs.components }}
#       rustflags: '-C opt-level=3 -C target-cpu=native'
#       release: true
#       cache: true
#       cache-key: 'cargo-cache'



# name: Build Rust Project with User Inputs

# on:
#   workflow_dispatch:
#     inputs:
#       toolchain:
#         description: 'Rust toolchain version (e.g., stable, nightly)'
#         required: true
#         default: 'stable'
#       target:
#         description: 'Compilation target (e.g., x86_64-unknown-linux-gnu)'
#         required: true
#         default: 'x86_64-unknown-linux-gnu'
#       components:
#         description: 'Rust components to install (comma-separated, e.g., clippy, rustfmt, llvm-tools)'
#         required: false
#         default: 'clippy, rustfmt, llvm-tools'
#       rustflags:
#         description: 'Rust compiler flags (e.g., -C opt-level=3 -C target-cpu=native -C lto)'
#         required: false
#         default: ''
#       release_number:
#         description: 'Build release version (true/false)'
#         required: false
#         default: ''
#       build_params: 
#         required: false
#         default: '--release'
#       cache:
#         description: 'Enable cache (true/false)'
#         required: false
#         default: 'true'
#       cache-key:
#         description: 'Cache key for cargo cache'
#         required: false
#         default: 'cargo-cache'

# jobs:
#   build:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Check out the repository
#       uses: actions/checkout@v2

#     - name: Set up Rust toolchain
#       uses: actions-rs/toolchain@v1
#       with:
#         toolchain: ${{ inputs.toolchain }}
#         target: ${{ inputs.target }}
#         components: ${{ inputs.components }}

#     - name: Install additional components
#       run: |
#         if [ -n "${{ inputs.components }}" ]; then
#           IFS=',' read -r -a components <<< "${{ inputs.components }}"
#           for component in "${components[@]}"; do
#             rustup component add "$(echo $component | xargs)"
#           done
#         fi

#     - name: Set Rust flags
#       run: echo "RUSTFLAGS=${{ inputs.rustflags }}" >> $GITHUB_ENV

#     - name: Set up cache
#       if: ${{ inputs.cache == 'true' }}
#       uses: actions/cache@v2
#       with:
#         path: ~/.cargo
#         key: ${{ inputs.cache-key }}

#     - name: Build Project
#       run: |
#         if [ "${{ inputs.release_number }}" == "true" ]; then
#           cargo build ${{ inputs.build_params }}
#         else
#           cargo build
#         fi
      
#     - name: Run Tests
#       run: cargo test

#     - name: Display Rust Environment
#       run: rustup show

#     - name: Display Rust Components
#       run: rustup component list --installed



#     # - name: Run tests
#     #   run: cargo test --verbose

#     # - name: Run Clippy
#     #   run: cargo clippy --all-targets --all-features

#     # - name: Install cargo-llvm-cov
#     #   run: cargo install cargo-llvm-cov

#     # - name: Install dependencies
#     #   run: sudo apt-get install -y jq bc

#     # - name: Run tests and generate coverage report
#     #   run: |
#     #     cargo llvm-cov clean --workspace
#     #     cargo llvm-cov --json --output-path=coverage.json

#     # - name: Check coverage
#     #   id: coverage-check
#     #   run: |
#     #     COVERAGE=$(jq '.data[0].totals.lines.pct' < coverage.json)
#     #     echo "Coverage is $COVERAGE%"
#     #     if (( $(echo "$COVERAGE < 50" | bc -l) )); then
#     #       echo "Code coverage is below 50%"
#     #       exit 1
#     #     fi
    
#     # - name: Upload to codecov.io
#     #   uses: codecov/codecov-action@v1.0.2
#     #   with:
#     #     token: ${{secrets.CODECOV_TOKEN}}
    
#     # - name: Login to Docker Hub
#     #   uses: docker/login-action@v3
#     #   with:
#     #     username: ${{ secrets.DOCKER_USERNAME }}
#     #     password: ${{ secrets.DOCKER_PASSWORD }}
    
#     # - name: Build and push
#     #   uses: docker/build-push-action@v5
#     #   with:
#     #     push: true
#     #     tags: docker.io/shazindia86/githubactionsdemo:${{ github.sha }}

#     #  - name: Run Trivy vulnerability scanner
#     #    uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
#     #    with:
#     #     image-ref: 'docker.io/shazindia86/githubactionsdemo:${{ github.sha }}'
#     #     format: 'template'
#     #     template: '@/contrib/sarif.tpl'
#     #     output: 'trivy-results.sarif'
